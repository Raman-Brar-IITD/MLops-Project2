name: CI/CD Pipeline for AWS ECR and Hugging Face

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  # --------------------------
  # JOB 1: Prepare Assets & Build Docker Image
  # --------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          # We still use the main requirements file here for the DVC steps
          pip install -r requirements.txt
          pip install dvc[s3]

      - name: Download DVC and MLflow Assets
        env:
          CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          dvc repro
          python flask_app/downloader.py

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build & Push Docker Image to ECR
        run: |
          # Temporarily use the correct requirements for the ECR build
          cp flask_app/requirements.txt ./requirements.txt
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Upload assets for Hugging Face job
        uses: actions/upload-artifact@v4
        with:
          name: huggingface-assets
          path: |
            Dockerfile
            flask_app/requirements.txt
            flask_app/
            assets/

  # --------------------------
  # JOB 2: Push Pre-built Assets to Hugging Face
  # --------------------------
  push-to-huggingface:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download assets from build job
        uses: actions/download-artifact@v4
        with:
          name: huggingface-assets
          path: .

      - name: Push to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          git clone https://user:$HF_TOKEN@huggingface.co/spaces/RamanSinghIITD/Sentiment-Analysis space_repo

          # Copy the downloaded artifacts into the repository
          # Crucially, copy the app's requirements.txt and rename it for the Docker build
          cp -r Dockerfile flask_app/ assets/ space_repo/
          cp flask_app/requirements.txt space_repo/requirements.txt

          cd space_repo
          git lfs install
          git add .
          git commit -m "Update build context from GitHub Actions" || echo "No changes to commit"
          git push https://user:$HF_TOKEN@huggingface.co/spaces/RamanSinghIITD/Sentiment-Analysis main